[{"title":"Qt工程远程调试","path":"//qt-project-remote-debug.html","content":"准备需要准备一些工具（交叉编译） ssh：openssh或者dropbear，开发板端部署sshd、宿主机端部署ssh sftp：一般跟ssh配套的，这个也放开发板端 在QtCreator添加Remote Device，保证ssh连接上 cmakeQtCreatorDeployment.txt写法参考 12远程绝对路径宿主文件路径:远程相对路径 实践：添加开发板所需要的文件到&#x2F;mnt目录 123/mnt//home/uisrc/project/lidarConfig_A_MEMS.json:data/home/uisrc/project/LDR0011A0_APP/demoApp:bin qmakeqmake pro文件写法：local.path表示本地路径，target.path表示远程路径，通过addFiles的属性赋值添加要部署的目录或文件 123456local.path = $$OUT_PWDlocal.path ~= s/builds.*/target.path = /rootaddFiles.path = $$target.pathaddFiles.files += file1addFiles.files += file2 实践：部署app放到&#x2F;root目录下 1234local.path = $$OUT_PWDlocal.path ~= s/builds.*/target.path = /rootINSTALLS += target","tags":["调试"],"categories":["嵌入式"]},{"title":"增量和存量市场","path":"//incremental-stock-market.html","content":"前言作为一名技术人，要对产品的市场动态时刻保持敏感，了解产品的昨天、今天、明天，才能有的放矢；不懂产品的程序员不是好程序员，我去过的公司，大部分也是程序员主导产品的研发流程，一部分人要承担项目前期的需求挖掘、客户拜访、可行性调研、产品文档编写、技术支持、产品运营等工作，可见市场敏感度对技术人来说很重要 增量市场定义 市场存在大量的需求，产品的潜力未有被充分挖掘，各种因素如政治、经济、疫情等导致需求的爆发，各方有百花齐放的趋势，巨头还没有出现，人称蓝海 特点 产品还没有充分被定义，存在着各种各样的发展方向和技术路线 需求量比较大，有引领时代潮流的趋势，堪称风口 时效性，产品也有它的生命周期，不会永远保持旺盛的产品力 与地缘政治、经济因素、社会动态强烈相关 识别 激光雷达：2022年激光雷达是增量市场，但2024年不是 半导体设备：如光刻机、CVD、PVD、Etch设备等 机器人：医护机器人、工业机器人等 核磁共振设备 存量市场定义 产品已经被定义、被市场接纳，行业的巨头有形成垄断的趋势，价格已经被打下来，利润空间很少了，称为红海，一般不建议加入存量市场 特点 需求已经明确，供应链稳定 行业垄断，头部竞争者占据优势地位（资本、技术、市场、人才） 利润空间不大 识别 2022年激光雷达是增量市场，但2024年不是，如今的汽车也不再是增量市场 2024年的新能源汽车是存量市场，价格战越演越烈，特斯拉、比亚迪等巨头体量优势特别明显，新势力则是赔本赚吆喝 公民教育，随着人口出生率下降，受教育的需求没有以前那么旺盛，教育市场已趋于饱和","tags":["产品"],"categories":["方法论"]},{"title":"汽车零部件研发的各个阶段","path":"//auto-parts-stage.html","content":"A样原型机开发阶段，问题较多且功能有限，以功能原理验证为主，一般是人工制造为主，比如拼模块组装，简易打板或者直接购买demo板 B样积累了一定的解决问题的经验，基本结构已经成型（产品参数），也有了成型的PCB板，软硬件处于不断的磨合阶段，此阶段硬件、软件的改动比较频繁，产品研发的主要阶段，持续时间比较长，还是人工制造为主 C样已经能够在生产线小批量生产，快速部署，还需要进行各项测试，可以借助一些自动化软件、设备辅助生产，提高生产效率 D样已经能够批量交付用户使用，可用于相关部门的检查、认证，此时也有完整的用户手册，出现问题也有技术支持","tags":["产品"],"categories":["方法论"]},{"title":"项目概要设计说明书","path":"//project-overview-specification.html","content":"项目介绍xxx是一个什么样的项目，技术点、人力投入、工期 需求概述把客户的目标需求大致讲清楚 应用领域 运行环境 功能指标 性能指标 条件限制 技术可行性分析材料、结构、硬件、软件、测试角度分析 需要采购什么设备、走什么认证流程、用什么测试手段 系统架构 &#x2F; 总体设计软硬件系统组成结构 上位机 下位机 服务器 通信协议 功能模块对系统架构里边的模块逐一拆解、分析，列出系统框图 模块1 模块2 模块3 每个模块工作流程图 流程1 流程2 流程3 接口设计模块的通信接口进行定义 接口1 接口2 接口3 通信协议硬件接口 软件协议 测试前置依赖：需要什么人、什么设备、什么条件 性能、参数指标测试 黑盒、白盒 维护客户现场出现问题怎么解决，材料、结构、硬件、软件的职责范围","tags":["管理"],"categories":["方法论"]},{"title":"Ubuntu22.04搭建ROS2运行环境","path":"//ubuntu22.04-install-ros2.html","content":"区域语言设置设置区域语言为US 123456789sudo apt updatesudo apt install localessudo locale-gen en_US en_US.UTF-8sudo update-locale LC_ALL=en_US.UTF-8 LANG=en_US.UTF-8export LANG=en_US.UTF-8 必备软件组件如果已经安装，可以跳过这一步骤 1234567sudo apt updatesudo apt-get install -y libyaml-cpp-devsudo apt-get install -y libpcap-devsudo apt install -y curl gnupg lsb-release 更新远程仓库源更新/etc/hosts文件，防止raw.githubusercontent.com被墙，可以通过nslookup命令查看域名服务器地址 12345185.199.110.133\traw.githubusercontent.com185.199.110.133 user-images.githubusercontent.com185.199.110.133 avatars2.githubusercontent.com185.199.100.133 avatars1.githubusercontent.com20.205.243.166 github.com 如果已经添加过源，这一步也可以跳过 12345sudo curl -sSL http://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpgecho &quot;deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $(source /etc/os-release &amp;&amp; echo $UBUNTU_CODENAME) main&quot; | sudo tee /etc/apt/sources.list.d/ros2.list &gt; /dev/nullsudo apt update 安装humble桌面版和基础版二选一 12sudo apt install ros-humble-desktop # 桌面版sudo apt install ros-humble-ros-base\t# 基础版 安装软件包colcon和libbackward-ros都安装一下 12sudo apt-get install python3-colcon-common-extensionssudo apt-get install -y ros-humble-backward-ros 验证ROS2借用小乌龟来验证是否成功，humble版本如果没有预装turtlesim的话请事先安装 1sudo apt install ros-humble-turtlesim 运行turtlesim_node和turtle_teleop_key两个节点 123source /opt/ros/humble/setup.bashros2 run turtlesim turtlesim_noderos2 run turtlesim turtle_teleop_key 控制效果 完全卸载如果你不想用humble这个版本，请用以下命令卸载干净 1sudo apt-get autoremove --purge ros-humble-desktop","tags":["ROS2"],"categories":["操作系统"]},{"title":"解决csv文件导出时间戳精度丢失的问题","path":"//csv-file-lose-precision.html","content":"丢失精度以圆周率数据输出为例，如果直接通过ostream输出到文件，则会丢失精度 123ostream stream;double value = 3.1415926;stream &lt;&lt; value; 保留精度需要通过std::setprecision函数来指定浮点数的精度 123ostream stream;double value = 3.1415926;stream &lt;&lt; std::fixed &lt;&lt; std::setprecision(6) &lt;&lt; value;","tags":["C++"],"categories":["程序设计"]},{"title":"Windows程序读取不了中文路径问题","path":"//windows-program-chinese-path-problem.html","content":"问题描述今天调试发现win32接口GetFileAttributesW居然不支持中文路径，于是寻找解决方案，找了半天，尝试用boost的fileystem库发现能解决问题，而且boost能跨平台！ 不支持中文win32接口获取文件属性，当传入参数带有中文字符时，它获取的属性就会异常 1DWORD GetFileAttributesW([in] LPCWSTR lpFileName); 支持中文boost判断是否为文件 123std::string realpath = &quot;D:\\\\新建文件夹\\\\a.txt&quot;;boost::filesystem::path p(realpath);boost::filesystem::is_regular_file(p); boost判断是否为文件夹 123std::string realpath = &quot;D:\\\\新建文件夹&quot;;boost::filesystem::path p(realpath);boost::filesystem::is_directory(p); 总结人生苦短，我用boost！","tags":["Windows"],"categories":["程序设计"]},{"title":"嵌入式代码优化技巧","path":"//embedded-code-optimization.html","content":"内存管理技巧1.C&#x2F;C++工程应尽量避免深拷贝，尽量用浅拷贝（指针或者引用），如果指针需要频繁拷贝，用智能指针是一种不错的选择 2.启用内存池管理线程的内存开销，事先在堆里边分配好，然后快速使用 避免复杂的浮点运算1.复杂的浮点运算尽量避免，有些芯片是不支持硬件双精度浮点数的，比如全志T3，实在是非用不可，可以用查表的方式加快速度 2.数据传输可以用整型数据压缩减少带宽，这个在can数据传输比较常见 空间换时间比如一个数据模型体积很大，加载起来很耗时，可以考虑把它编译到软件里边去，然后运行的时候提前加载到内存 算法复杂度优化1.时间复杂度，减少循环使用次数 2.空间复杂度的角度优化 并行框架openMP了解一下，在关键的代码段加上omp并行处理 字节对齐用好字节对齐功能可以优化cpu流水线的处理效率 内核态的利用可以把一些业务操作写进驱动，利用操作系统的调度优化，内核态和用户态哪一个更高效，这个是相对的，得看系统调用和库函数的颗粒度，可以值得尝试一下 线程调度尝试调整一些线程的优先级提高调度效率，另外Linux也允许绑核操作 防御性编程 申请一段buffer后总是习惯性的将其内容memset为0，当然这是针对plain类型的数据，防止在数据解析的时候解析到不合法的数据 总是习惯性的判断数组的边界 申请指针不应该悬空，应该给它一个值或者是nullptr，使用前判断它是否为空 巧用断言","tags":["调优"],"categories":["嵌入式"]},{"title":"软件版本那些事","path":"//software-version.html","content":"软件版本跟测试阶段或者软件的生命周期所处的阶段有关，一般有以下几个版本 alpha内测版本，仅限团队内部测试使用，不对外公开。大多数软件产品在向公众发布之前都要经过多个步骤。alpha版本是该系统的一部分，用于开发高效、准确和无缺陷的软件程序。这一阶段软件会频繁改动。 项目处于不稳定状态。可能有许多未修复的错误，包括安全问题。API可能会更改，恕不另行通知。安装新的alpha版本需要卸载项目，从而丢失所有数据。只针对那些想要提前预览项目的人。尚不适合共享发展。不适合生产现场使用。目标受众是希望参与项目测试、调试和开发的开发人员。 beta通过内部测试之后的版本，开放给外部渠道使用。Beta版本通常在外观、感觉和功能上与最终产品相当接近；在这一阶段变更还是会经常发生。 所有重要的数据丢失和安全漏洞得到解决。如果模块提供了一个API，它应该被认为是冻结的，这样那些使用API的人就可以开始升级他们的项目了。如果是项目的升级或更新，则应提供升级&#x2F;更新路径，并且现有用户应该能够在不丢失数据的情况下升级&#x2F;更新到新版本。所有文档都应该是最新的。目标受众是想要参与项目的测试、调试和开发的开发人员，以及与项目对接的其他项目的开发人员。通常不适用于生产站点，但如果站点管理员非常了解项目，并且知道如何处理任何遗留问题，则可以在某些生产站点上使用。 rcrelease candidate，beta版本迭代之后比较成熟的版本，按照惯例，每当程序的更新几乎准备就绪时，测试版本就会被赋予rc号。如果发现了需要修复的关键错误，则更新程序并以更高的rc号重新发布。当没有严重错误存在，或者没有发现额外的严重错误时，rc名称将被删除。 release正式提供给客户使用的版本 stablerelease版本中的稳定版本，一般比较少使用","tags":["版本"],"categories":["方法论"]},{"title":"程序员健康指南","path":"//programmer-health-guide.html","content":"前言前不久，IT界的大佬左耳朵耗子陈皓心梗逝世，享年仅47岁，真是天妒英才，据说他是一名工作狂…… 感慨好的身体是革命的本钱，年纪越大，就会发现编程并不是脑力活，其实更偏向体力活！长时间工作吃的是人的体力和精力，开会、写文档、编码、测试样样工作都需要有充沛和持续的精力投入；在中国这种996工作制遍地开花的国度，如果你没有铁一样的身体素质，你基本很难熬35岁这道坎，这也是为什么很多公司喜欢招小年轻的原因；并且，久坐在办公室容易引发很多疾病：眼疲劳、关节疼痛、头晕眼花、颈椎病……新闻经常能听到这样的剧本：某某大厂员工在加班的时候突然猝死，留下背负房贷的妻儿老小……说了这么多，想必大家已经知道拥有一个好身体对程序员来说是多么的重要，下面将从几个方面介绍一些程序员健康指南，希望能对广大程序员有所帮助 作息篇 早点睡 多睡点 睡好点 尽量午睡 饮食篇 少吃甜食 少盐 少油 多喝水 荤素搭配 运动篇 慢跑 &#x2F; 散步，Linus就是在家里买了一台跑步机，边跑步边编码 伸腿、弯腰 到户外去，city walk或者到公园散散心都可以 工作篇 番茄工作法，将一个任务分解一个个工作包，以一个工作包为单位执行 学会坦然，现实生活中技术问题往往不是最重要的问题，大多数问题也跟编程无关 向上管理，遇到问题学会及时反馈，而不是一个人扛着 提高工作效率，要做的事情排一个优先级 生活篇 多遵循内心的意愿 学会拒绝 有什么喜欢的事情要趁着年轻去追寻，尝试一些爱好，如学学钢琴、听听音乐会 张弛有道，切勿绷得像机械钟的发条一样紧 社交篇 尊重他人的想法 尊重自己的内心 语录《活着》 没有什么比时间更具有说服力了，因为时间无需通知我们就可以改变一切 人是为活着本身而活着，而不是为了活着之外的任何事物所活着 一个人命再大，要是自己想死，那就怎么也活不了 《百年孤独》 我们终究会死。所以我们的人生目标不该是长命百岁，而应该做点自己想做的","tags":["健康"],"categories":["学科"]},{"title":"gdb8.3交叉编译","path":"//gdb8.3-porting.html","content":"下载去gdb官网下载gdb8.3 1wget https://ftp.gnu.org/gnu/gdb/gdb-8.3.tar.xz 下载完成后解压xz文件 12tar xf gdb-8.3.tar.xzcd gdb-8.3 配置环境变量 1export PATH=$PATH:/home/topeet/rk3399/gcc-linaro-6.3.1-2017.05-x86_64_aarch64-linux-gnu/bin 编译gdb 12./configure --target=aarch64-linux-gnu --prefix=$PWD/buildmake -j8 编译gdbserver 123cd gdb./configure --target=aarch64-linux-gnu --host=aarch64-linux-gnu --prefix=$PWD/build CXXFLAGS=&#x27;-fPIC -static&#x27;make -j8 测试将gdbserver部署到开发板文件系统，并运行gdbserver 1gdbserver --multi :10000 demo 宿主机端运行aarch64-linux-gnu-gdb 1target remote 192.168.137.22:10000","tags":["gdb"],"categories":["嵌入式"]},{"title":"about","path":"/about/index.html","content":"hywing’s blog内容分享一些工作中的问题、想法，与技术、管理、产品相关的记录、思考、沉淀，希望对读者有帮助 原则 尽量简短 尽量少图片 尽量准确 免责这个是我的个人博客，如果对你有帮助是我莫大的荣幸，自行更改请恕不另行通知！"}]